version: '3.4'

services:
  firstservice:
    container_name: diceroll
    image: firstservice
    build:
      context: microservices/First_Service
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: production
    depends_on:
      - grafanaa
    ports:
      - 8080:8080
    networks:
      - rabbit

  secondservice:
    container_name: diceroll2
    image: secondservice
    build:
      context: microservices/Second_Service
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: production
    depends_on:
      - grafanaa
    ports:
      - 8081:8081
    networks:
      - rabbit

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.100.0
    command:
      - "--config"
      - "/otel-local-config.yaml"
    volumes:
      - ./devops/otel/otel-collector.yaml:/otel-local-config.yaml
    depends_on:
      - tempo
    networks:
      - rabbit
      
  tempo:
    image: grafana/tempo:latest
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./devops/tempo/tempo.yaml:/etc/tempo.yaml
      - ./devops/tempo/tempo-data:/tmp/tempo
    ports:
      - "3200:3200" # tempo http
      - "9095:9095" # tempo grpc
      - "4317" # otlp grpc
      - "4318" # otlp http
    networks:
      - rabbit

  grafanaa:
    image: grafana/grafana:9.4.3
    volumes:
      - ./devops/grafana/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
    networks:
      - rabbit

  rabbitmq:
    image: rabbitmq:3.6.14-management
    healthcheck:
        test: ["CMD", "curl", "-f", "http://127.0.0.1:5672"]
        interval: 30s
        timeout: 10s
        retries: 5
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rabbit

  rabbitsender:
    container_name: rabbitsender
    image: rabbitsender
    build:
      context: microservices/RabbitMQ_Sender
      dockerfile: ./Dockerfile
    depends_on:
      - rabbitmq
      - grafanaa
    ports:
      - 8083:8083
    networks:
      - rabbit

  rabbitreciever:
    container_name: rabbitreciever
    image: rabbitreciever
    build:
      context: microservices/RabbitMQ_Reciever
      dockerfile: ./Dockerfile
    depends_on:
      - rabbitmq
      - grafanaa
    ports:
      - 8084:8084
    networks:
      - rabbit

# Microservices need to be part of the same network to record traces
networks:
  rabbit: